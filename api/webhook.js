const fetch = require('node-fetch');
const { AbortController } = require('abort-controller');

// Vercel Âπ≥Âè∞ÈÖçÁΩÆ
module.exports.config = {
  api: {
    bodyParser: false, // Á¶ÅÁî® Vercel ÁöÑÈªòËÆ§Ëß£ÊûêÂô®ÔºåÊàë‰ª¨Ëá™Â∑±Â§ÑÁêÜÂéüÂßãËØ∑Ê±Ç‰Ωì
  },
};

// --- Webhook ÈÖçÁΩÆ ---
// ÁßªÈô§‰∫Ü TypeScript ÁöÑ interface ÂÆö‰πâ
let webhookMap = {};
try {
  if (process.env.WEBHOOK_CONFIG) {
    webhookMap = JSON.parse(process.env.WEBHOOK_CONFIG);
  }
} catch (error) {
  console.error("Ëß£ÊûêÁéØÂ¢ÉÂèòÈáè WEBHOOK_CONFIG Â§±Ë¥•:", error);
}

// --- ÈùôÊÄÅÂìÅÁßçÊò†Â∞ÑË°® (È´òÊïà) ---
const SYMBOL_MAP = {
  // ÊúüË¥ß
  'CL1!': 'ËΩªË¥®ÂéüÊ≤πÊúüË¥ß', 'GC1!': 'ÈªÑÈáëÊúüË¥ß', 'SI1!': 'ÁôΩÈì∂ÊúüË¥ß',
  'HG1!': 'ÈìúÊúüË¥ß', 'NG1!': 'Â§©ÁÑ∂Ê∞îÊúüË¥ß', 'RB1!': 'Ëû∫Á∫πÈí¢ÊúüË¥ß',
  'IODEX': 'ÈìÅÁüøÁü≥ÊúüË¥ß',
  // Â§ñÊ±á
  'DXY': 'ÁæéÂÖÉÊåáÊï∞', 'XAUUSD': 'ÈªÑÈáëÁé∞Ë¥ß/ÁæéÂÖÉ', 'XAGUSD': 'ÁôΩÈì∂/ÁæéÂÖÉ',
  'EURUSD': 'Ê¨ßÂÖÉ/ÁæéÂÖÉ', 'GBPUSD': 'Ëã±Èïë/ÁæéÂÖÉ', 'USDJPY': 'ÁæéÂÖÉ/Êó•ÂÖÉ',
  'AUDUSD': 'Êæ≥ÂÖÉ/ÁæéÂÖÉ',
  // Âä†ÂØÜË¥ßÂ∏Å
  'BTCUSDT': 'ÊØîÁâπÂ∏Å/USDT', 'BTCUSD': 'ÊØîÁâπÂ∏Å/ÁæéÂÖÉ',
  'ETHUSDT': '‰ª•Â§™Âùä/USDT', 'ETHUSD': '‰ª•Â§™Âùä/ÁæéÂÖÉ',
  // ÁæéËÇ°ÊåáÊï∞/ÂÄ∫Âà∏
  'US10Y': 'ÁæéÂõΩ10Âπ¥ÊúüÂõΩÂÄ∫Êî∂ÁõäÁéá', 'US02Y': 'ÁæéÂõΩ2Âπ¥ÊúüÂõΩÂÄ∫Êî∂ÁõäÁéá',
  'SPX': 'Ê†áÊôÆ500ÊåáÊï∞', 'NDX': 'Á∫≥ÊñØËææÂÖã100ÊåáÊï∞',
};

// --- Â∑•ÂÖ∑ÂáΩÊï∞ ---
async function getRawBody(req) {
  return new Promise((resolve, reject) => {
    const chunks = [];
    req.on('data', (chunk) => chunks.push(chunk));
    req.on('end', () => resolve(Buffer.concat(chunks)));
    req.on('error', (err) => reject(err));
  });
}

async function fetchWithTimeout(url, options = {}) {
  const { timeout = 2000, ...rest } = options;
  const controller = new AbortController();
  const id = setTimeout(() => controller.abort(), timeout);
  try {
    const response = await fetch(url, { ...rest, signal: controller.signal });
    return response;
  } finally {
    clearTimeout(id);
  }
}

// --- ËÇ°Á•®ÂêçÁß∞Êü•ËØ¢Ê®°Âùó (Âä®ÊÄÅ) ---
const gbDecoder = new TextDecoder('gb18030');

async function getStockNameFromSina(stockCode, marketPrefix) {
  const url = `https://hq.sinajs.cn/list=${marketPrefix}${stockCode}`;
  try {
    const resp = await fetchWithTimeout(url);
    if (!resp.ok) return null;
    const buf = await resp.arrayBuffer();
    const text = gbDecoder.decode(buf);
    const name = text.split('"')[1]?.split(',')[0]?.trim();
    return name || null;
  } catch {
    return null;
  }
}

async function getStockNameFromTencent(stockCode, marketPrefix) {
  const finalCode = marketPrefix === 'hk' ? stockCode.padStart(5, '0') : stockCode;
  const url = `https://qt.gtimg.cn/q=${marketPrefix}${finalCode}`;
  try {
    const resp = await fetchWithTimeout(url);
    if (!resp.ok) return null;
    const buf = await resp.arrayBuffer();
    const text = gbDecoder.decode(buf);
    const parts = text.split('~');
    return parts.length > 1 ? parts[1]?.trim() || null : null;
  } catch {
    return null;
  }
}

async function getChineseStockName(stockCode) {
  let marketPrefix = null;
  if (/^\d{1,5}$/.test(stockCode)) marketPrefix = 'hk';
  else if (/^\d{6}$/.test(stockCode)) {
    if (stockCode.startsWith('6') || stockCode.startsWith('5')) marketPrefix = 'sh';
    else if (stockCode.startsWith('0') || stockCode.startsWith('3') || stockCode.startsWith('1')) marketPrefix = 'sz';
  }
  if (!marketPrefix) return null;

  const name = await getStockNameFromSina(stockCode, marketPrefix) ?? await getStockNameFromTencent(stockCode, marketPrefix);
  return name;
}

// --- Êñ∞Â¢ûÔºö‰ø°Âè∑ÊñπÂêëËØÜÂà´ ---
function getSignalPrefix(message) {
  if (/(Â§ö|buy|long|ÁúãÊ∂®|ÂÅöÂ§ö|Â§öÂ§¥)/i.test(message)) {
    return 'üü¢ ';
  }
  if (/(Á©∫|sell|short|ÁúãË∑å|ÂÅöÁ©∫|Á©∫Â§¥)/i.test(message)) {
    return 'üî¥ ';
  }
  return ''; // Â¶ÇÊûúÊ≤°ÊúâÊòéÁ°ÆÁöÑÂ§öÁ©∫‰ø°Âè∑ÔºåÂàô‰∏çÊ∑ªÂä†‰ªª‰ΩïÂõæÊ†á
}

// --- Ê†∏ÂøÉÊ∂àÊÅØÂ§ÑÁêÜÈÄªËæë ---
async function processMessage(body) {
  const match = body.match(/Ê†áÁöÑ\s*[:Ôºö]\s*([A-Za-z0-9!_.-]+)/);
  if (!match) {
    return body; // Êú™ÂåπÈÖçÂà∞ "Ê†áÁöÑ"ÔºåËøîÂõûÂéüÊñá
  }

  const originalPattern = match[0]; // "Ê†áÁöÑ: CL1!"
  const symbol = match[1]; // "CL1!"

  // 1. ‰ºòÂÖà‰ªéÈùôÊÄÅÊò†Â∞ÑË°®Êü•Êâæ
  let name = SYMBOL_MAP[symbol];

  // 2. Â¶ÇÊûúÊòØÁ∫ØÊï∞Â≠ó‰∏îË°®‰∏≠Ê≤°ÊúâÔºåÂàôÂ∞ùËØïÊü•ËØ¢ËÇ°Á•®API
  if (!name && /^\d{1,6}$/.test(symbol)) {
    name = await getChineseStockName(symbol);
  }

  // 3. Â¶ÇÊûúÊâæÂà∞‰∫ÜÂêçÁß∞ÔºåÂàôÊõøÊç¢ÂéüÊñá
  if (name) {
    return body.replace(originalPattern, `Ê†áÁöÑ: **${name}(${symbol})**`);
  }

  return body; // Êú™ÊâæÂà∞‰ªª‰ΩïÂêçÁß∞ÔºåËøîÂõûÂéüÊñá
}

// --- ‰∏ªÂ§ÑÁêÜÂáΩÊï∞ ---
module.exports = async function handler(req, res) {
  const debugLog = [];
  try {
    if (req.method !== 'POST') {
      return res.status(405).json({ error: 'Method Not Allowed' });
    }

    const key = req.query.key;
    const config = key ? webhookMap[key] : undefined;
    if (!config?.url) {
      return res.status(404).json({ error: `Key '${key}' not found in configuration.` });
    }

    const rawBody = (await getRawBody(req)).toString('utf8');
    let messageBody = rawBody;
    try {
      // Â∞ùËØïËß£ÊûêJSONÔºåÂ¶ÇÊûúÂ§±Ë¥•Âàô‰ΩøÁî®ÂéüÂßãÊñáÊú¨
      const data = JSON.parse(rawBody);
      messageBody = Object.entries(data).map(([k, v]) => `${k}: ${v}`).join(', ');
    } catch {
      // Not a JSON, proceed with rawBody
    }

    const processedContent = await processMessage(messageBody.trim());
    
    const signalPrefix = getSignalPrefix(processedContent);
    
    const finalMessage = `${signalPrefix}[ËÅöÂÆùÁõÜ] ${processedContent}`;
    debugLog.push(`Final message: ${finalMessage}`);

    const isWecom = config.type === 'wecom' || config.type === 'jubaopen';
    const resp = await fetchWithTimeout(config.url, {
      method: 'POST',
      headers: { 'Content-Type': isWecom ? 'application/json' : 'text/plain; charset=utf-8' },
      body: isWecom
        ? JSON.stringify({ msgtype: 'markdown', markdown: { content: finalMessage } })
        : finalMessage,
    });

    if (!resp.ok) {
        const errorText = await resp.text();
        debugLog.push(`Forward failed with status ${resp.status}: ${errorText}`);
        throw new Error('Forward failed');
    }

    return res.status(200).json({ success: true, processed: processedContent });

  } catch (error) {
    console.error("Handler Error:", error);
    debugLog.push(`Error: ${error.message}`);
    return res.status(500).json({ error: 'Internal Server Error', details: error.message, log: debugLog });
  }
}

